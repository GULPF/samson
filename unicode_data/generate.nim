## Generates a Nim file containing constants for Unicode categories needed
## to parse JSON5.

import std / [os, strutils, tables]

const UnicodeLetter = ["Lu", "Ll", "Lt", "Lm", "lo", "Nl"]
const UnicodeCombiningMark = ["Mn", "Mc"]
const UnicodeDigit = ["Nd"]
const UnicodeConnectorPunctuation = ["Pc"]
const data = staticRead("./DerivedGeneralCategory.txt")

var ranges = initTable[string, seq[(string, string)]]()
var singles = initTable[string, seq[string]]()

ranges["Letter"] = @[]
ranges["CombiningMark"] = @[]
ranges["Digit"] = @[]
ranges["ConnectorPunctuation"] = @[]
singles["Letter"] = @[]
singles["CombiningMark"] = @[]
singles["Digit"] = @[]
singles["ConnectorPunctuation"] = @[]

proc catName(cat: string): string =
  case cat
  of UnicodeLetter: "Letter"
  of UnicodeCombiningMark: "CombiningMark"
  of UnicodeDigit: "Digit"
  of UnicodeConnectorPunctuation: "ConnectorPunctuation"
  else: ""

proc formatHex(num: string): string = "0x" & num & ".Rune"

for line in data.splitLines:
  let line = line.strip()
  if line.startsWith("#") or line == "":
    continue
  let fields = line.splitWhitespace()
  let name = catName(fields[2])
  if name != "":
    if ".." in fields[0]:
      let firstlast = fields[0].split("..")
      ranges[name].add (firstlast[0], firstlast[1])
    else:
      singles[name].add fields[0]

var codeOutput = """
## This file is generated by a program. Do not edit.

import std / unicode

"""

for name, catRanges in ranges:
  if catRanges.len == 0:
    codeOutput.add "const " & name & "Ranges*: array[0, Rune] = []\n\n"
    continue
  codeOutput.add "const " & name & "Ranges* = [\n"
  for r in catRanges:
    codeOutput.add "  " & formatHex(r[0]) & ", " & formatHex(r[1]) & ",\n"
  codeOutput.setLen(codeOutput.len - 2)
  codeOutput.add "\n]\n\n"

for name, catSingles in singles:
  if catSingles.len == 0:
    codeOutput.add "const " & name & "Singles*: array[0, Rune] = []\n\n"
    continue
  codeOutput.add "const " & name & "Singles* = [\n"
  for r in catSingles:
    codeOutput.add "  " & formatHex(r) & ",\n"
  codeOutput.setLen(codeOutput.len - 2)
  codeOutput.add "\n]\n\n"

writeFile(paramStr(1), codeOutput)